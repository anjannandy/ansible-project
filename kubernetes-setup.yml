---
- name: Install Docker and Kubernetes on Ubuntu Noble machines
  hosts: kubernetes
  become: yes
  vars:
    kubernetes_version: "1.30.0-1.1"
    docker_version: "5:26.1.0-1~ubuntu.24.04~noble"

  tasks:
    - name: Update apt package index
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - gpg
        state: present

    # Docker Installation for Ubuntu Noble
    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key (Ubuntu Noble)
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository (Ubuntu Noble)
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable"
        state: present

    - name: Update apt after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    # Kubernetes Installation for Ubuntu Noble
    - name: Add Kubernetes GPG key (Ubuntu Noble)
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        chmod a+r /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository (Ubuntu Noble)
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
        state: present

    - name: Update apt after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Disable swap
      command: swapoff -a

    - name: Remove swap from fstab
      lineinfile:
        path: /etc/fstab
        regexp: '.*swap.*'
        state: absent

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Make kernel modules persistent
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    - name: Configure sysctl for Kubernetes
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

    - name: Configure containerd for Kubernetes
      shell: |
        containerd config default | tee /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

    - name: Restart containerd
      systemd:
        name: containerd
        state: restarted

    - name: Enable kubelet service
      systemd:
        name: kubelet
        enabled: yes

    # Kubernetes cluster initialization (master only)
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeconfig
      when: node_role == "master"

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket=unix:///var/run/containerd/containerd.sock
      when: node_role == "master" and not kubeconfig.stat.exists
      register: kubeadm_init

    - name: Create .kube directory
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: node_role == "master"

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        remote_src: yes
      when: node_role == "master"

    - name: Wait for cluster to be ready
      pause:
        seconds: 30
      when: node_role == "master"

    - name: Install Flannel network plugin
      command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      become_user: "{{ ansible_user }}"
      when: node_role == "master"
      ignore_errors: yes

    - name: Get join command
      command: kubeadm token create --print-join-command
      register: join_command
      when: node_role == "master"

    - name: Set join command as fact
      set_fact:
        k8s_join_command: "{{ join_command.stdout }}"
      when: node_role == "master"

    - name: Share join command with worker nodes
      set_fact:
        k8s_join_command: "{{ hostvars[groups['kubernetes'][0]]['k8s_join_command'] }}"
      when: node_role == "worker"

    - name: Join worker nodes to cluster
      command: "{{ k8s_join_command }}"
      when: node_role == "worker"
      ignore_errors: yes