---
- name: Install Docker and Kubernetes
  hosts: kubernetes
  become: yes
  strategy: linear
  vars:
    kubernetes_version: "1.30.0-1.1"
    docker_version: "5:26.1.0-1~ubuntu.24.04~noble"
    max_retries: 10
    retry_delay: 30
    max_apt_retries: 15
    apt_retry_delay: 30
    apt_timeout: 180
    wait_for_auto_tasks: true
    setup_completed_file: "/var/lib/k8s_setup_completed"
    progress_dir: "/var/lib/k8s_setup_progress"

    # Enhanced logging configuration
    log_enabled: true
    log_dir: "/var/log/k8s-setup"
    log_file: "k8s-setup-{{ ansible_date_time.date }}-{{ ansible_date_time.time | regex_replace(':', '-') }}.log"
    local_log_dir: "./logs"
    host_combined_log: "./logs/host-{{ inventory_hostname }}-combined.log"

    # Real-time logging configuration
    realtime_log_enabled: true
    realtime_log_file: "realtime-{{ inventory_hostname }}.log"
    realtime_update_interval: 2  # seconds
    log_streaming_script: "./logs/stream_logs.sh"

  pre_tasks:
    # Create local log directory
    - name: Create local log directory
      delegate_to: localhost
      become: no
      file:
        path: "{{ local_log_dir }}"
        state: directory
        mode: '0755'
      run_once: true
      when: log_enabled
      ignore_errors: true

    # Create real-time log streaming script
    - name: Create real-time log streaming script
      delegate_to: localhost
      become: no
      copy:
        content: |
          #!/bin/bash
          
          # Real-time log streaming script for Kubernetes setup
          LOG_DIR="{{ local_log_dir }}"
          WATCH_INTERVAL="{{ realtime_update_interval }}"
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          PURPLE='\033[0;35m'
          CYAN='\033[0;36m'
          NC='\033[0m' # No Color
          
          # Function to display logs with colors
          display_log() {
            local host=$1
            local log_file="${LOG_DIR}/realtime-${host}.log"
            
            if [ -f "$log_file" ]; then
              echo -e "${CYAN}=== $host ===${NC}"
              tail -n 10 "$log_file" | while read line; do
                if [[ "$line" =~ \[ERROR\] ]]; then
                  echo -e "${RED}$line${NC}"
                elif [[ "$line" =~ \[SUCCESS\] ]]; then
                  echo -e "${GREEN}$line${NC}"
                elif [[ "$line" =~ \[WARNING\] ]]; then
                  echo -e "${YELLOW}$line${NC}"
                elif [[ "$line" =~ \[INFO\] ]]; then
                  echo -e "${BLUE}$line${NC}"
                elif [[ "$line" =~ \[PROGRESS\] ]]; then
                  echo -e "${PURPLE}$line${NC}"
                else
                  echo "$line"
                fi
              done
              echo ""
            fi
          }
          
          # Function to show overall progress
          show_progress() {
            echo -e "${CYAN}==============================================${NC}"
            echo -e "${CYAN}    Kubernetes Setup - Real-time Monitor${NC}"
            echo -e "${CYAN}==============================================${NC}"
            echo "$(date '+%Y-%m-%d %H:%M:%S')"
            echo ""
          }
          
          # Main monitoring loop
          echo "Starting real-time log monitoring..."
          echo "Press Ctrl+C to stop monitoring"
          echo ""
          
          while true; do
            clear
            show_progress
            
            # Display logs for each host
            for host_file in ${LOG_DIR}/realtime-*.log; do
              if [ -f "$host_file" ]; then
                host=$(basename "$host_file" | sed 's/realtime-//' | sed 's/.log//')
                display_log "$host"
              fi
            done
            
            # Show combined status
            if [ -f "${LOG_DIR}/setup-status.txt" ]; then
              echo -e "${CYAN}=== Setup Status ===${NC}"
              cat "${LOG_DIR}/setup-status.txt"
              echo ""
            fi
            
            sleep $WATCH_INTERVAL
          done
        dest: "{{ log_streaming_script }}"
        mode: '0755'
      run_once: true
      when: realtime_log_enabled
      ignore_errors: true

    # Create watch script for individual hosts
    - name: Create individual host watch script
      delegate_to: localhost
      become: no
      copy:
        content: |
          #!/bin/bash
          # Watch script for {{ inventory_hostname }}
          
          HOST="{{ inventory_hostname }}"
          LOG_FILE="{{ local_log_dir }}/realtime-${HOST}.log"
          
          echo "Monitoring logs for $HOST..."
          echo "Log file: $LOG_FILE"
          echo "Press Ctrl+C to stop"
          echo ""
          
          # Colors
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          PURPLE='\033[0;35m'
          NC='\033[0m'
          
          tail -f "$LOG_FILE" 2>/dev/null | while read line; do
            if [[ "$line" =~ \[ERROR\] ]]; then
              echo -e "${RED}$line${NC}"
            elif [[ "$line" =~ \[SUCCESS\] ]]; then
              echo -e "${GREEN}$line${NC}"
            elif [[ "$line" =~ \[WARNING\] ]]; then
              echo -e "${YELLOW}$line${NC}"
            elif [[ "$line" =~ \[INFO\] ]]; then
              echo -e "${BLUE}$line${NC}"
            elif [[ "$line" =~ \[PROGRESS\] ]]; then
              echo -e "${PURPLE}$line${NC}"
            else
              echo "$line"
            fi
          done
        dest: "{{ local_log_dir }}/watch-{{ inventory_hostname }}.sh"
        mode: '0755'
      when: realtime_log_enabled
      ignore_errors: true

    # Initialize real-time log file
    - name: Initialize real-time log file
      delegate_to: localhost
      become: no
      copy:
        content: |
          [INFO] Real-time log monitoring started for {{ inventory_hostname }}
          [INFO] Timestamp: {{ ansible_date_time.iso8601 }}
          [PROGRESS] Initializing Kubernetes setup...
        dest: "{{ local_log_dir }}/{{ realtime_log_file }}"
        mode: '0644'
      when: realtime_log_enabled
      ignore_errors: true

    # Initialize host log file
    - name: Initialize host log file
      delegate_to: localhost
      become: no
      copy:
        content: |
          =================================================================
          Kubernetes Setup Log for {{ inventory_hostname }}
          Started: {{ ansible_date_time.iso8601 }}
          =================================================================

        dest: "{{ host_combined_log }}"
        mode: '0644'
      when: log_enabled
      ignore_errors: true

    # Create remote log directory
    - name: Create remote log directory
      file:
        path: "{{ log_dir }}"
        state: directory
        mode: '0755'
      when: log_enabled
      ignore_errors: true

    # Create progress tracking directory
    - name: Create progress tracking directory
      file:
        path: "{{ progress_dir }}"
        state: directory
        mode: '0755'
      ignore_errors: true

    # Initialize remote log file
    - name: Initialize remote log file
      shell: |
        echo "==================================================================" > {{ log_dir }}/{{ log_file }}
        echo "Kubernetes Setup Log for {{ inventory_hostname }}" >> {{ log_dir }}/{{ log_file }}
        echo "Started: $(date)" >> {{ log_dir }}/{{ log_file }}
        echo "==================================================================" >> {{ log_dir }}/{{ log_file }}
        echo "" >> {{ log_dir }}/{{ log_file }}
      when: log_enabled
      changed_when: false
      ignore_errors: true

    # Start real-time logging
    - name: Start real-time logging
      delegate_to: localhost
      become: no
      shell: |
        echo "[PROGRESS] Starting setup for {{ inventory_hostname }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[INFO] Remote log directory created" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled
      changed_when: false
      ignore_errors: true

  tasks:
    # Check for setup completion flag
    - name: Check for setup completion flag
      stat:
        path: "{{ setup_completed_file }}"
      register: setup_completed
      tags: always
      ignore_errors: true

    - name: Update real-time log - setup check
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Checking setup completion status" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Setup status: {{ 'Already completed' if setup_completed.stat.exists|default(false) else 'Not completed - proceeding' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled
      changed_when: false
      ignore_errors: true

    # Skip setup if already completed
    - name: Check if setup already completed
      debug:
        msg: "Setup already completed on {{ inventory_hostname }}. Skipping configuration."
      when: setup_completed.stat.exists
      tags: always

    # Network connectivity tests
    - name: Test network connectivity
      shell: |
        echo "Testing network connectivity..."
        
        # Test DNS resolution
        if nslookup download.docker.com >/dev/null 2>&1; then
          echo "DNS resolution: OK"
        else
          echo "DNS resolution: FAILED"
        fi
        
        # Test connectivity to Docker
        if timeout 10 curl -s -I https://download.docker.com >/dev/null 2>&1; then
          echo "Docker site connectivity: OK"
        else
          echo "Docker site connectivity: FAILED"
        fi
        
        # Check if behind proxy
        if [ -n "$http_proxy" ] || [ -n "$https_proxy" ]; then
          echo "Proxy detected: $http_proxy $https_proxy"
        else
          echo "No proxy detected"
        fi
        
        # Test with different DNS
        echo "Testing with Google DNS..."
        timeout 10 curl -s --dns-servers 8.8.8.8 -I https://download.docker.com >/dev/null 2>&1 && echo "Google DNS: OK" || echo "Google DNS: FAILED"
        
        exit 0
      register: network_test
      when: not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Update real-time log - network test
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Network connectivity test results:" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "{{ network_test.stdout | default('No output') }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    # System preparation tasks
    - name: Kill package manager processes
      shell: |
        for pid in $(ps -ef | grep -E 'unattended-upgr|apt-get|dpkg|apt' | grep -v grep | awk '{print $2}'); do
          kill -9 $pid 2>/dev/null || true
        done
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: kill_result
      tags: prepare_system

    - name: Update real-time log - kill processes
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Killing package manager processes" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if kill_result is defined and kill_result.changed|default(false) else 'INFO' }}] Package manager processes handled" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Remove package locks
      shell: |
        rm -f /var/lib/dpkg/lock*
        rm -f /var/lib/apt/lists/lock
        rm -f /var/cache/apt/archives/lock
        rm -f /var/cache/apt/archives/partial/lock
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: locks_result
      tags: prepare_system

    - name: Update real-time log - remove locks
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Removing package locks" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if locks_result is defined and locks_result.changed|default(false) else 'INFO' }}] Package locks removed" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Fix interrupted dpkg
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        dpkg --configure --force-confdef --force-confold -a
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: dpkg_result
      tags: prepare_system

    - name: Update real-time log - fix dpkg
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Fixing interrupted dpkg" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if dpkg_result is defined and dpkg_result.changed|default(false) else 'INFO' }}] dpkg configuration completed" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Clean apt cache
      shell: |
        apt-get clean
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: clean_result
      tags: prepare_system

    - name: Update real-time log - clean cache
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Cleaning apt cache" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] apt cache cleaned" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Fix broken dependencies
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        timeout {{ apt_timeout }} apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" -f install -y
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: fix_deps_result
      tags: prepare_system

    - name: Update real-time log - fix dependencies
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Fixing broken dependencies" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if fix_deps_result is defined and fix_deps_result.rc == 0 else 'WARNING' }}] Dependency fix {{ 'completed' if fix_deps_result is defined and fix_deps_result.rc == 0 else 'had issues' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Update apt package index
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        timeout {{ apt_timeout }} apt-get update
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: update_result
      tags: prepare_system

    - name: Update real-time log - apt update
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Updating apt package index" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if update_result is defined and update_result.rc == 0 else 'WARNING' }}] apt update {{ 'completed' if update_result is defined and update_result.rc == 0 else 'had issues' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    # Install basic packages
    - name: Install required packages
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        timeout {{ apt_timeout }} apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y apt-transport-https ca-certificates curl software-properties-common
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: pkg_result
      tags: prepare_system

    - name: Update real-time log - install packages
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Installing basic packages (apt-transport-https, ca-certificates, curl, software-properties-common)" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if pkg_result is defined and pkg_result.rc == 0 else 'WARNING' }}] Basic packages {{ 'installed' if pkg_result is defined and pkg_result.rc == 0 else 'installation had issues' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    # Docker installation
    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: not setup_completed.stat.exists
      failed_when: false
      register: keyrings_dir_result
      tags: docker_setup

    - name: Update real-time log - keyrings directory
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Creating keyrings directory" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Keyrings directory ready" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Add Docker GPG key (simplified)
      shell: |
        echo "Downloading Docker GPG key..."
        rm -f /etc/apt/keyrings/docker.gpg
        if curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg; then
          chmod a+r /etc/apt/keyrings/docker.gpg
          echo "Docker GPG key installed successfully"
          exit 0
        else
          echo "Failed to install Docker GPG key"
          exit 1
        fi
      register: docker_key_result
      when: not setup_completed.stat.exists
      changed_when: docker_key_result.rc == 0
      failed_when: docker_key_result.rc != 0
      tags: docker_setup

    - name: Update real-time log - Docker GPG key
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Adding Docker GPG key (simplified method)" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        if [ "{{ docker_key_result.rc | default(999) }}" = "0" ]; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker GPG key added successfully" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        else
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Docker GPG key installation failed" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        fi
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true


    # Alternative Docker GPG key method if the first fails
    - name: Alternative Docker GPG key method
      block:
        - name: Download GPG key to temporary file
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /tmp/docker.gpg
            timeout: 60
            mode: '0644'
          register: gpg_download

        - name: Import GPG key from file
          shell: |
            gpg --dearmor < /tmp/docker.gpg > /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
            rm -f /tmp/docker.gpg
          when: gpg_download is succeeded

        - name: Update real-time log - Alternative method
          delegate_to: localhost
          become: no
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Used alternative method for Docker GPG key" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker GPG key added via alternative method" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
          when: realtime_log_enabled and gpg_download is succeeded
          changed_when: false
          ignore_errors: true

      when:
        - not setup_completed.stat.exists
        - docker_key_result is defined and docker_key_result.rc != 0
      tags: docker_setup

    # Verify GPG key was added successfully
    - name: Verify Docker GPG key installation
      stat:
        path: /etc/apt/keyrings/docker.gpg
      register: docker_gpg_check
      when: not setup_completed.stat.exists
      tags: docker_setup

    - name: Update real-time log - GPG key verification
      delegate_to: localhost
      become: no
      shell: |
        if [ "{{ docker_gpg_check.stat.exists | default(false) }}" = "True" ]; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker GPG key verified - file exists" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        else
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Docker GPG key verification failed - file not found" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        fi
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    # Skip Docker repo addition if GPG key failed
    - name: Add Docker repository
      shell: |
        if [ ! -f /etc/apt/keyrings/docker.gpg ]; then
          echo "Docker GPG key not found, skipping repository addition"
          exit 1
        fi
        
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Verify the repository was added
        if [ -f /etc/apt/sources.list.d/docker.list ]; then
          echo "Docker repository added successfully"
          exit 0
        else
          echo "Failed to add Docker repository"
          exit 1
        fi
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: docker_repo_result
      tags: docker_setup

    - name: Update real-time log - Docker repository
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Adding Docker repository" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if docker_repo_result is defined and docker_repo_result.rc == 0 else 'ERROR' }}] Docker repository {{ 'added' if docker_repo_result is defined and docker_repo_result.rc == 0 else 'failed' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Update apt cache after adding Docker repo
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        timeout {{ apt_timeout }} apt-get update
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: apt_update_docker_result
      tags: docker_setup

    - name: Update real-time log - apt update Docker
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Updating apt cache for Docker packages" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if apt_update_docker_result is defined and apt_update_docker_result.rc == 0 else 'WARNING' }}] apt cache updated for Docker" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Install Docker with specific version
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        timeout {{ apt_timeout }} apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y docker-ce={{ docker_version }} docker-ce-cli={{ docker_version }} containerd.io
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: docker_install_result
      tags: docker_setup

    - name: Update real-time log - Docker installation
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Installing Docker (version {{ docker_version }})" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if docker_install_result is defined and docker_install_result.rc == 0 else 'ERROR' }}] Docker installation {{ 'completed' if docker_install_result is defined and docker_install_result.rc == 0 else 'failed' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Configure Docker daemon
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0644'
      when: not setup_completed.stat.exists
      register: docker_config_result
      tags: docker_setup

    - name: Update real-time log - Docker configuration
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Configuring Docker daemon" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker daemon configured" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Restart Docker
      service:
        name: docker
        state: restarted
        enabled: yes
      when: not setup_completed.stat.exists
      register: docker_restart_result
      tags: docker_setup

    - name: Update real-time log - Docker restart
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Restarting Docker service" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if docker_restart_result is defined and docker_restart_result.changed|default(false) else 'WARNING' }}] Docker service {{ 'restarted' if docker_restart_result is defined and docker_restart_result.changed|default(false) else 'restart attempted' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    # Kubernetes installation
    - name: Add Kubernetes GPG key
      shell: |
        # Set timeouts and retry logic for Kubernetes GPG key
        max_attempts=3
        attempt=1
        success=false
        
        while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
          echo "Attempt $attempt of $max_attempts to download Kubernetes GPG key..."
          
          # Try with different methods
          if timeout 60 curl -fsSL --connect-timeout 10 --max-time 60 https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg 2>/dev/null; then
            success=true
            echo "Successfully downloaded Kubernetes GPG key via curl"
          elif timeout 60 wget -q --timeout=10 --tries=1 -O - https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg 2>/dev/null; then
            success=true
            echo "Successfully downloaded Kubernetes GPG key via wget"
          else
            echo "Attempt $attempt failed, waiting 10 seconds before retry..."
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        
        if [ "$success" = true ]; then
          chmod a+r /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo "Kubernetes GPG key setup completed successfully"
          exit 0
        else
          echo "Failed to download Kubernetes GPG key after $max_attempts attempts"
          exit 1
        fi
      async: 120  # Allow 2 minutes for this task
      poll: 5     # Check every 5 seconds
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: k8s_key_result
      tags: kubernetes_setup

    - name: Update real-time log - Kubernetes GPG key
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Adding Kubernetes GPG key (with timeout and retry logic)" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if k8s_key_result is defined and k8s_key_result.rc == 0 else 'WARNING' }}] Kubernetes GPG key {{ 'added' if k8s_key_result is defined and k8s_key_result.rc == 0 else 'had issues' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Add Kubernetes repository
      shell: |
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: k8s_repo_result
      tags: kubernetes_setup

    - name: Update real-time log - Kubernetes repository
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Adding Kubernetes repository" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubernetes repository added" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Update apt cache after adding Kubernetes repo
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        timeout {{ apt_timeout }} apt-get update
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: apt_update_k8s_result
      tags: kubernetes_setup

    - name: Update real-time log - apt update Kubernetes
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Updating apt cache for Kubernetes packages" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if apt_update_k8s_result is defined and apt_update_k8s_result.rc == 0 else 'WARNING' }}] apt cache updated for Kubernetes" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Install Kubernetes components
      shell: |
        export DEBIAN_FRONTEND=noninteractive
        timeout {{ apt_timeout }} apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y kubelet={{ kubernetes_version }} kubeadm={{ kubernetes_version }} kubectl={{ kubernetes_version }}
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: k8s_install_result
      tags: kubernetes_setup

    - name: Update real-time log - Kubernetes installation
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Installing Kubernetes components (kubelet, kubeadm, kubectl v{{ kubernetes_version }})" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if k8s_install_result is defined and k8s_install_result.rc == 0 else 'ERROR' }}] Kubernetes components installation {{ 'completed' if k8s_install_result is defined and k8s_install_result.rc == 0 else 'failed' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Hold Kubernetes packages
      shell: |
        apt-mark hold kubelet kubeadm kubectl
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: k8s_hold_result
      tags: kubernetes_setup

    - name: Update real-time log - hold packages
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Holding Kubernetes packages to prevent upgrades" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubernetes packages held" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    # System configuration
    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/swap/d' /etc/fstab
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: swap_result
      tags: system_config

    - name: Update real-time log - disable swap
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Disabling swap (required for Kubernetes)" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Swap disabled" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Load kernel modules
      shell: |
        modprobe overlay
        modprobe br_netfilter
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: modules_result
      tags: system_config

    - name: Update real-time log - kernel modules
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Loading kernel modules (overlay, br_netfilter)" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kernel modules loaded" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Configure kernel parameters
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/k8s.conf
        owner: root
        group: root
        mode: '0644'
      when: not setup_completed.stat.exists
      register: sysctl_result
      tags: system_config

    - name: Update real-time log - kernel parameters
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Configuring kernel parameters for Kubernetes" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kernel parameters configured" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    - name: Apply kernel parameters
      shell: |
        sysctl --system
        exit 0
      changed_when: true
      failed_when: false
      when: not setup_completed.stat.exists
      register: sysctl_apply_result
      tags: system_config

    - name: Update real-time log - apply kernel parameters
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Applying kernel parameters" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kernel parameters applied" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

    # Kubernetes cluster initialization (master only)
    - name: Initialize Kubernetes master
      shell: |
        kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_default_ipv4.address }}
        exit 0
      register: kubeadm_init
      when:
        - inventory_hostname == groups['kubernetes'][0]
        - not setup_completed.stat.exists
      tags: master_init

    - name: Update real-time log - master initialization
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Initializing Kubernetes master node" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if kubeadm_init is defined and kubeadm_init.rc == 0 else 'ERROR' }}] Kubernetes master {{ 'initialized successfully' if kubeadm_init is defined and kubeadm_init.rc == 0 else 'initialization failed' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when:
        - realtime_log_enabled and not setup_completed.stat.exists
        - inventory_hostname == groups['kubernetes'][0]
      changed_when: false
      ignore_errors: true

    - name: Create .kube directory for root
      file:
        path: /root/.kube
        state: directory
        owner: root
        group: root
        mode: '0755'
      when:
        - inventory_hostname == groups['kubernetes'][0]
        - not setup_completed.stat.exists
        - kubeadm_init is defined and kubeadm_init.rc == 0
      register: kube_dir_result
      tags: master_init

    - name: Copy admin.conf to root's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        owner: root
        group: root
        mode: '0644'
        remote_src: yes
      when:
        - inventory_hostname == groups['kubernetes'][0]
        - not setup_completed.stat.exists
        - kubeadm_init is defined and kubeadm_init.rc == 0
      register: kube_config_result
      tags: master_init

    - name: Update real-time log - kube config
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Setting up kubectl configuration" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] kubectl configuration ready" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when:
        - realtime_log_enabled and not setup_completed.stat.exists
        - inventory_hostname == groups['kubernetes'][0]
        - kubeadm_init is defined and kubeadm_init.rc == 0
      changed_when: false
      ignore_errors: true

    - name: Install Flannel network
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
        exit 0
      when:
        - inventory_hostname == groups['kubernetes'][0]
        - not setup_completed.stat.exists
        - kubeadm_init is defined and kubeadm_init.rc == 0
      register: flannel_result
      tags: master_init

    - name: Update real-time log - Flannel network
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Installing Flannel network plugin" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if flannel_result is defined and flannel_result.rc == 0 else 'WARNING' }}] Flannel network plugin {{ 'installed' if flannel_result is defined and flannel_result.rc == 0 else 'installation attempted' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when:
        - realtime_log_enabled and not setup_completed.stat.exists
        - inventory_hostname == groups['kubernetes'][0]
        - kubeadm_init is defined and kubeadm_init.rc == 0
      changed_when: false
      ignore_errors: true

    - name: Get join command
      shell: |
        kubeadm token create --print-join-command
        exit 0
      register: join_command_raw
      when:
        - inventory_hostname == groups['kubernetes'][0]
        - not setup_completed.stat.exists
        - kubeadm_init is defined and kubeadm_init.rc == 0
      tags: master_init

    - name: Set join command fact
      set_fact:
        join_command: "{{ join_command_raw.stdout }}"
      when:
        - inventory_hostname == groups['kubernetes'][0]
        - not setup_completed.stat.exists
        - join_command_raw is defined and join_command_raw.rc == 0
      tags: master_init

    - name: Update real-time log - join command
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Generating join command for worker nodes" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Join command generated and ready for worker nodes" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when:
        - realtime_log_enabled and not setup_completed.stat.exists
        - inventory_hostname == groups['kubernetes'][0]
        - join_command_raw is defined and join_command_raw.rc == 0
      changed_when: false
      ignore_errors: true

    - name: Share join command with other hosts
      set_fact:
        join_command: "{{ hostvars[groups['kubernetes'][0]].join_command }}"
      when:
        - inventory_hostname != groups['kubernetes'][0]
        - not setup_completed.stat.exists
        - hostvars[groups['kubernetes'][0]].join_command is defined
      tags: worker_join

    # Worker nodes join the cluster
    - name: Join cluster
      shell: |
        {{ join_command }}
        exit 0
      register: join_result
      when:
        - inventory_hostname != groups['kubernetes'][0]
        - not setup_completed.stat.exists
        - join_command is defined
      tags: worker_join

    - name: Update real-time log - join cluster
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Joining Kubernetes cluster as worker node" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ 'SUCCESS' if join_result is defined and join_result.rc == 0 else 'ERROR' }}] Worker node {{ 'joined cluster successfully' if join_result is defined and join_result.rc == 0 else 'failed to join cluster' }}" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when:
        - realtime_log_enabled and not setup_completed.stat.exists
        - inventory_hostname != groups['kubernetes'][0]
        - join_command is defined
      changed_when: false
      ignore_errors: true

    # Mark as completed
    - name: Mark setup as completed
      file:
        path: "{{ setup_completed_file }}"
        state: touch
        mode: '0644'
      when: not setup_completed.stat.exists
      register: mark_complete_result
      tags: finalize

    - name: Update real-time log - setup completed
      delegate_to: localhost
      become: no
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROGRESS] Finalizing setup" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] ✅ Kubernetes setup completed successfully on {{ inventory_hostname }}!" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Setup marked as completed" >> "{{ local_log_dir }}/{{ realtime_log_file }}"
      when: realtime_log_enabled and not setup_completed.stat.exists
      changed_when: false
      ignore_errors: true

  post_tasks:
    # Create setup status summary
    - name: Create setup status summary
      delegate_to: localhost
      become: no
      shell: |
        echo "Kubernetes Setup Status Summary - $(date)" > "{{ local_log_dir }}/setup-status.txt"
        echo "===========================================" >> "{{ local_log_dir }}/setup-status.txt"
        echo "" >> "{{ local_log_dir }}/setup-status.txt"
        
        # Count completed vs total hosts
        total_hosts=$(echo "{{ groups['kubernetes'] | length }}")
        completed_hosts=0
        
        for host in {{ groups['kubernetes'] | join(' ') }}; do
          if [ -f "{{ local_log_dir }}/realtime-${host}.log" ]; then
            if grep -q "setup completed successfully" "{{ local_log_dir }}/realtime-${host}.log"; then
              completed_hosts=$((completed_hosts + 1))
              echo "✅ $host: COMPLETED" >> "{{ local_log_dir }}/setup-status.txt"
            else
              echo "🔄 $host: IN PROGRESS" >> "{{ local_log_dir }}/setup-status.txt"
            fi
          else
            echo "❌ $host: NOT STARTED" >> "{{ local_log_dir }}/setup-status.txt"
          fi
        done
        
        echo "" >> "{{ local_log_dir }}/setup-status.txt"
        echo "Progress: $completed_hosts/$total_hosts hosts completed" >> "{{ local_log_dir }}/setup-status.txt"
        
        if [ "$completed_hosts" -eq "$total_hosts" ]; then
          echo "Status: ALL HOSTS COMPLETED ✅" >> "{{ local_log_dir }}/setup-status.txt"
        else
          echo "Status: SETUP IN PROGRESS 🔄" >> "{{ local_log_dir }}/setup-status.txt"
        fi
      when: realtime_log_enabled
      run_once: true
      changed_when: false
      ignore_errors: true

    # Display final instructions
    - name: Display real-time monitoring instructions
      debug:
        msg:
          - "🎉 Kubernetes Setup with Real-time Monitoring is Active!"
          - ""
          - "📊 Real-time Monitoring Options:"
          - "  • Watch all hosts: ./logs/stream_logs.sh"
          - "  • Watch specific host: ./logs/watch-{{ inventory_hostname }}.sh"
          - "  • View status: cat ./logs/setup-status.txt"
          - ""
          - "📁 Log Files:"
          - "  • Real-time logs: ./logs/realtime-*.log"
          - "  • Combined logs: ./logs/host-*-combined.log"
          - "  • Setup status: ./logs/setup-status.txt"
          - ""
          - "🔄 To start monitoring, run:"
          - "  ./logs/stream_logs.sh"
          - ""
          - "🔧 Troubleshooting:"
          - "  • If GPG key download fails, check network connectivity"
          - "  • Use 'tail -f ./logs/realtime-<hostname>.log' for individual host monitoring"
          - "  • Check './logs/setup-status.txt' for overall progress"
      when: realtime_log_enabled
      run_once: true