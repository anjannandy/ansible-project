---
# ===== KUBERNETES SETUP USING SCRIPTS WITH SERIAL EXECUTION =====
- name: Kubernetes Setup using Scripts - Serial Execution with Retry
  hosts: kubernetes
  become: no
  gather_facts: yes
  serial: 1  # Process one server at a time
  vars:
    kubernetes_version: "1.30.0-1.1"
    pod_network_cidr: "10.244.0.0/16"
    master_ip: "192.168.1.190"
    kubeadm_timeout: 600
    apt_timeout: 300
    max_retries: 3
    script_dir: "/home/ubuntu/k8s-scripts"
    state_dir: "/var/lib/k8s-setup-state"
    log_dir: "/home/ubuntu/k8s-setup-logs"

  tasks:
    - name: "Display current server being processed"
      debug:
        msg: "Processing Kubernetes setup on {{ inventory_hostname }} ({{ ansible_host }}) - Role: {{ node_role }}"

    - name: "Create local log directory"
      delegate_to: localhost
      become: no
      file:
        path: "./logs"
        state: directory
        mode: '0755'
      run_once: true

    - name: "Create script directory on remote host"
      file:
        path: "{{ script_dir }}"
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu

    - name: "Copy setup scripts to remote host"
      copy:
        src: "scripts/{{ item }}"
        dest: "{{ script_dir }}/{{ item }}"
        mode: '0755'
        owner: ubuntu
        group: ubuntu
      loop:
        - setup_k8s.sh
        - utils.sh
        - run_step.sh
        - cluster_status.sh

    - name: "Create remote directories for state and logs"
      become: yes
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: ubuntu
        group: ubuntu
      loop:
        - "{{ state_dir }}"
        - "{{ log_dir }}"

    # ===== STEP 1: SYSTEM PREPARATION =====
    - name: "STEP 1: Check if System Preparation already completed"
      stat:
        path: "{{ state_dir }}/01_system_prep_completed"
      register: step1_status

    - name: "STEP 1: Execute System Preparation"
      command: "{{ script_dir }}/run_step.sh system_prep"
      register: step1_result
      retries: "{{ max_retries }}"
      delay: 30
      until: step1_result.rc == 0
      when: not step1_status.stat.exists
      timeout: 1200
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        LOG_FILE: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        STATE_DIR: "{{ state_dir }}"
        MAX_RETRIES: "{{ max_retries }}"

    - name: "STEP 1: Display results"
      debug:
        msg: |
          STEP 1 - System Preparation: {{ 'COMPLETED' if step1_status.stat.exists else ('SUCCESS' if step1_result is defined and step1_result.rc == 0 else 'FAILED') }}
          {% if step1_result is defined and step1_result.stderr is defined and step1_result.stderr %}
          Errors: {{ step1_result.stderr }}
          {% endif %}

    - name: "STEP 1: Fail if step failed after retries"
      fail:
        msg: "STEP 1 - System Preparation failed after {{ max_retries }} attempts"
      when:
        - not step1_status.stat.exists
        - step1_result is defined
        - step1_result.rc != 0

    # ===== STEP 2: DOCKER INSTALLATION =====
    - name: "STEP 2: Check if Docker Installation already completed"
      stat:
        path: "{{ state_dir }}/02_docker_install_completed"
      register: step2_status

    - name: "STEP 2: Execute Docker Installation"
      command: "{{ script_dir }}/run_step.sh install_docker"
      register: step2_result
      retries: "{{ max_retries }}"
      delay: 30
      until: step2_result.rc == 0
      when: not step2_status.stat.exists
      timeout: 1800
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        LOG_FILE: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        STATE_DIR: "{{ state_dir }}"
        MAX_RETRIES: "{{ max_retries }}"

    - name: "STEP 2: Display results"
      debug:
        msg: |
          STEP 2 - Docker Installation: {{ 'COMPLETED' if step2_status.stat.exists else ('SUCCESS' if step2_result is defined and step2_result.rc == 0 else 'FAILED') }}
          {% if step2_result is defined and step2_result.stderr is defined and step2_result.stderr %}
          Errors: {{ step2_result.stderr }}
          {% endif %}

    - name: "STEP 2: Fail if step failed after retries"
      fail:
        msg: "STEP 2 - Docker Installation failed after {{ max_retries }} attempts"
      when:
        - not step2_status.stat.exists
        - step2_result is defined
        - step2_result.rc != 0

    # ===== STEP 3: KUBERNETES INSTALLATION =====
    - name: "STEP 3: Check if Kubernetes Installation already completed"
      stat:
        path: "{{ state_dir }}/03_k8s_install_completed"
      register: step3_status

    - name: "STEP 3: Execute Kubernetes Installation"
      command: "{{ script_dir }}/run_step.sh install_kubernetes"
      register: step3_result
      retries: "{{ max_retries }}"
      delay: 30
      until: step3_result.rc == 0
      when: not step3_status.stat.exists
      timeout: 1800
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        LOG_FILE: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        STATE_DIR: "{{ state_dir }}"
        MAX_RETRIES: "{{ max_retries }}"
        K8S_VERSION: "{{ kubernetes_version }}"

    - name: "STEP 3: Display results"
      debug:
        msg: |
          STEP 3 - Kubernetes Installation: {{ 'COMPLETED' if step3_status.stat.exists else ('SUCCESS' if step3_result is defined and step3_result.rc == 0 else 'FAILED') }}
          {% if step3_result is defined and step3_result.stderr is defined and step3_result.stderr %}
          Errors: {{ step3_result.stderr }}
          {% endif %}

    - name: "STEP 3: Fail if step failed after retries"
      fail:
        msg: "STEP 3 - Kubernetes Installation failed after {{ max_retries }} attempts"
      when:
        - not step3_status.stat.exists
        - step3_result is defined
        - step3_result.rc != 0

    # ===== STEP 4: SYSTEM CONFIGURATION =====
    - name: "STEP 4: Check if System Configuration already completed"
      stat:
        path: "{{ state_dir }}/04_system_config_completed"
      register: step4_status

    - name: "STEP 4: Execute System Configuration"
      command: "{{ script_dir }}/run_step.sh configure_system"
      register: step4_result
      retries: "{{ max_retries }}"
      delay: 30
      until: step4_result.rc == 0
      when: not step4_status.stat.exists
      timeout: 900
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        LOG_FILE: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        STATE_DIR: "{{ state_dir }}"
        MAX_RETRIES: "{{ max_retries }}"

    - name: "STEP 4: Display results"
      debug:
        msg: |
          STEP 4 - System Configuration: {{ 'COMPLETED' if step4_status.stat.exists else ('SUCCESS' if step4_result is defined and step4_result.rc == 0 else 'FAILED') }}
          {% if step4_result is defined and step4_result.stderr is defined and step4_result.stderr %}
          Errors: {{ step4_result.stderr }}
          {% endif %}

    - name: "STEP 4: Fail if step failed after retries"
      fail:
        msg: "STEP 4 - System Configuration failed after {{ max_retries }} attempts"
      when:
        - not step4_status.stat.exists
        - step4_result is defined
        - step4_result.rc != 0

    # ===== STEP 5: ROLE-SPECIFIC SETUP =====
    - name: "STEP 5: Check if Role-specific Setup already completed"
      stat:
        path: "{{ state_dir }}/{{ '05_master_init_completed' if node_role == 'master' else '05_worker_join_completed' }}"
      register: step5_status

    - name: "STEP 5: Execute Role-specific Setup"
      command: "{{ script_dir }}/run_step.sh {{ 'initialize_master' if node_role == 'master' else 'join_worker' }}"
      register: step5_result
      retries: "{{ max_retries }}"
      delay: 30
      until: step5_result.rc == 0
      when: not step5_status.stat.exists
      timeout: "{{ kubeadm_timeout if node_role == 'master' else 900 }}"
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        LOG_FILE: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        STATE_DIR: "{{ state_dir }}"
        MAX_RETRIES: "{{ max_retries }}"
        NODE_ROLE: "{{ node_role }}"
        K8S_VERSION: "{{ kubernetes_version }}"
        POD_CIDR: "{{ pod_network_cidr }}"
        MASTER_IP: "{{ master_ip }}"
        MASTER_HOST: "{{ hostvars[groups['master'][0]]['ansible_host'] }}"
        KUBEADM_TIMEOUT: "{{ kubeadm_timeout }}"

    - name: "STEP 5: Display results"
      debug:
        msg: |
          STEP 5 - {{ 'Master Initialization' if node_role == 'master' else 'Worker Join' }}: {{ 'COMPLETED' if step5_status.stat.exists else ('SUCCESS' if step5_result is defined and step5_result.rc == 0 else 'FAILED') }}
          {% if step5_result is defined and step5_result.stderr is defined and step5_result.stderr %}
          Errors: {{ step5_result.stderr }}
          {% endif %}

    - name: "STEP 5: Fail if step failed after retries"
      fail:
        msg: "STEP 5 - {{ 'Master Initialization' if node_role == 'master' else 'Worker Join' }} failed after {{ max_retries }} attempts"
      when:
        - not step5_status.stat.exists
        - step5_result is defined
        - step5_result.rc != 0

    # ===== STEP 6: CNI INSTALLATION (MASTER ONLY) =====
    - name: "STEP 6: Check if CNI Installation already completed"
      stat:
        path: "{{ state_dir }}/06_cni_install_completed"
      register: step6_status
      when: node_role == "master"

    - name: "STEP 6: Execute CNI Installation"
      command: "{{ script_dir }}/run_step.sh install_cni"
      register: step6_result
      retries: "{{ max_retries }}"
      delay: 30
      until: step6_result.rc == 0
      when: 
        - node_role == "master"
        - not step6_status.stat.exists
      timeout: 900
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        LOG_FILE: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        STATE_DIR: "{{ state_dir }}"
        MAX_RETRIES: "{{ max_retries }}"
        POD_CIDR: "{{ pod_network_cidr }}"

    - name: "STEP 6: Display results"
      debug:
        msg: |
          STEP 6 - CNI Installation: {{ 'COMPLETED' if step6_status.stat.exists else ('SUCCESS' if step6_result is defined and step6_result.rc == 0 else 'SKIPPED') }}
          {% if step6_result is defined and step6_result.stderr is defined and step6_result.stderr %}
          Errors: {{ step6_result.stderr }}
          {% endif %}
      when: node_role == "master"

    - name: "STEP 6: Fail if step failed after retries"
      fail:
        msg: "STEP 6 - CNI Installation failed after {{ max_retries }} attempts"
      when:
        - node_role == "master"
        - not step6_status.stat.exists
        - step6_result is defined
        - step6_result.rc != 0

    # ===== WAIT FOR CLUSTER STABILIZATION =====
    - name: "Wait for cluster to stabilize"
      pause:
        seconds: 60
      when: node_role == "master"

    # ===== FINAL VERIFICATION =====
    - name: "FINAL: Execute Verification"
      command: "{{ script_dir }}/run_step.sh verify_installation"
      register: final_result
      timeout: 300
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        LOG_FILE: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        STATE_DIR: "{{ state_dir }}"
        NODE_ROLE: "{{ node_role }}"

    - name: "FINAL: Display verification results"
      debug:
        msg: |
          Final Verification on {{ inventory_hostname }}: {{ 'SUCCESS' if final_result.rc == 0 else 'FAILED' }}
          Role: {{ node_role }}
          {% if final_result.stdout %}
          Output: {{ final_result.stdout }}
          {% endif %}

    # ===== COPY LOGS =====
    - name: "Copy logs back to local"
      fetch:
        src: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
        dest: "./logs/{{ inventory_hostname }}-setup.log"
        flat: yes
      ignore_errors: yes

    - name: "Display individual node completion"
      debug:
        msg: |
          ===============================================
          Node Setup Complete: {{ inventory_hostname }}
          ===============================================
          Role: {{ node_role }}
          IP: {{ ansible_host }}
          Status: {{ 'SUCCESS' if final_result.rc == 0 else 'FAILED' }}
          Log: ./logs/{{ inventory_hostname }}-setup.log
          ===============================================

# ===== CLUSTER-WIDE VERIFICATION =====
- name: Final Cluster Verification and Status
  hosts: kubernetes
  become: no
  gather_facts: no
  run_once: true
  vars:
    script_dir: "/home/ubuntu/k8s-scripts"

  tasks:
    - name: "Final cluster verification"
      command: "{{ script_dir }}/cluster_status.sh"
      register: final_verification
      timeout: 300
      environment:
        HOME: "/home/ubuntu"
        USER: "ubuntu"
        KUBECONFIG: "/home/ubuntu/.kube/config"
      delegate_to: "{{ groups['master'][0] }}"
      ignore_errors: yes

    - name: "Display final cluster status"
      debug:
        msg: |
          =================================================================
          FINAL KUBERNETES CLUSTER STATUS
          =================================================================
          {{ final_verification.stdout if final_verification is defined and final_verification.stdout is defined else 'No status available' }}
          =================================================================

    - name: "Save final cluster status"
      copy:
        content: |
          Kubernetes Cluster Status - {{ ansible_date_time.iso8601 }}
          ================================================================
          {{ final_verification.stdout if final_verification is defined and final_verification.stdout is defined else 'No status available' }}
          ================================================================
        dest: "./logs/final-cluster-status-{{ ansible_date_time.epoch }}.txt"
      delegate_to: localhost
      become: no

    - name: "Display final success message"
      debug:
        msg: |
          ===============================================
          🎉 KUBERNETES CLUSTER SETUP COMPLETED! 🎉
          ===============================================

          Your cluster is ready!

          To access your cluster:
          ssh ubuntu@{{ hostvars[groups['master'][0]]['ansible_host'] }}
          kubectl get nodes
          kubectl get pods -A

          All logs saved to ./logs/ directory
          ===============================================