- name: Install and configure Vault cluster with PostgreSQL
  hosts: vault_nodes
  become: yes
  vars:
    vault_version: "1.15.3"
    vault_api_port: 8200
    vault_cluster_port: 8201
    vault_config_path: "/etc/vault.d"
    vault_db_host: "10.0.2.20"
    vault_db_port: 5433
    vault_db_name: "vault"
    vault_db_user: "vault_admin"
    vault_db_password: "vault_admin_123"
    vault_schema: "public"
    vault_table: "vault_kv_store"
    vault_unseal_table: "vault_unseal_keys"
    vault_unseal_key_path: "/root/unseal.keys"
    postgres_admin_user: "postgres"
    postgres_admin_password: "postgres_password"

  tasks:

    - name: Install dependencies
      apt:
        name:
          - unzip
          - curl
          - postgresql-client
        state: present
        update_cache: yes
      tags: ['install']

    - name: Check if Vault binary exists
      stat:
        path: /usr/local/bin/vault
      register: vault_binary_check
      tags: ['install', 'always']

    - name: Create vault user
      user:
        name: vault
        system: yes
        shell: /bin/false
        home: /etc/vault.d
        createhome: no
      tags: ['install']

    - name: Download Vault binary
      get_url:
        url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
        dest: "/tmp/vault.zip"
      when: not vault_binary_check.stat.exists
      tags: ['install']

    - name: Unpack Vault
      unarchive:
        src: "/tmp/vault.zip"
        dest: "/usr/local/bin/"
        remote_src: yes
        owner: root
        group: root
        mode: '0755'
      when: not vault_binary_check.stat.exists
      tags: ['install']

    - name: Create Vault config directory
      file:
        path: "{{ vault_config_path }}"
        state: directory
        owner: vault
        group: vault
        mode: '0750'
      tags: ['configure']

    - name: Create Vault data directory
      file:
        path: "/opt/vault/data"
        state: directory
        owner: vault
        group: vault
        mode: '0750'
      tags: ['configure']

    - name: Configure Vault (vault.hcl)
      copy:
        dest: "{{ vault_config_path }}/vault.hcl"
        owner: vault
        group: vault
        mode: '0640'
        content: |
          storage "postgresql" {
            connection_url = "postgresql://{{ vault_db_user }}:{{ vault_db_password }}@{{ vault_db_host }}:{{ vault_db_port }}/{{ vault_db_name }}?sslmode=disable"
            table          = "{{ vault_table }}"
          }

          listener "tcp" {
            address     = "0.0.0.0:{{ vault_api_port }}"
            tls_disable = 1
          }

          api_addr     = "http://{{ ansible_host }}:{{ vault_api_port }}"
          cluster_addr = "http://{{ ansible_host }}:{{ vault_cluster_port }}"
          cluster_name = "vault-cluster"
          ui           = true
          
          log_level = "INFO"
          log_format = "standard"
      notify: restart vault
      tags: ['configure']

    - name: Create systemd unit for Vault
      copy:
        dest: /etc/systemd/system/vault.service
        content: |
          [Unit]
          Description=Vault secret management tool
          Requires=network-online.target
          After=network-online.target
          ConditionFileNotEmpty={{ vault_config_path }}/vault.hcl
          StartLimitIntervalSec=60
          StartLimitBurst=3

          [Service]
          Type=notify
          EnvironmentFile=-/etc/vault.d/vault.env
          User=vault
          Group=vault
          ProtectSystem=full
          ProtectHome=read-only
          PrivateTmp=yes
          PrivateDevices=yes
          SecureBits=keep-caps
          AmbientCapabilities=CAP_IPC_LOCK
          CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
          NoNewPrivileges=yes
          ExecStart=/usr/local/bin/vault server -config={{ vault_config_path }}/vault.hcl
          ExecReload=/bin/kill -HUP $MAINPID
          KillMode=process
          Restart=on-failure
          RestartSec=5
          TimeoutStopSec=30
          StartLimitInterval=60
          StartLimitBurst=3
          LimitNOFILE=65536
          LimitMEMLOCK=infinity

          [Install]
          WantedBy=multi-user.target
      notify: reload systemd
      tags: ['configure']

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      tags: ['configure']

    - name: Enable and start Vault
      systemd:
        name: vault
        enabled: yes
        state: started
      tags: ['start']

    - name: Wait for Vault service to be ready
      wait_for:
        port: "{{ vault_api_port }}"
        host: "{{ ansible_host }}"
        delay: 5
        timeout: 60
      tags: ['start']

    - name: Test Vault API connectivity
      uri:
        url: "http://{{ ansible_host }}:{{ vault_api_port }}/v1/sys/health"
        method: GET
        status_code: [200, 429, 472, 501, 503]
      register: vault_health
      until: vault_health.status in [200, 429, 472, 501, 503]
      retries: 10
      delay: 5
      tags: ['verify']

    # Initialization phase
    - name: Check if Vault is initialized
      uri:
        url: "http://{{ ansible_host }}:{{ vault_api_port }}/v1/sys/init"
        method: GET
      register: vault_init_status
      delegate_to: "{{ groups['vault_nodes'][0] }}"
      run_once: true
      tags: [ 'init' , 'unseal']

    - name: Set initialization status fact
      set_fact:
        vault_is_initialized: "{{ vault_init_status.json.initialized }}"
      run_once: true
      tags: [ 'init', 'unseal' ]

    # Check if unseal keys already exist in database
    - name: Check for existing unseal keys in database
      postgresql_query:
        db: "{{ vault_db_name }}"
        query: "SELECT key FROM {{ vault_unseal_table }} ORDER BY id;"
        login_host: "{{ vault_db_host }}"
        login_user: "{{ postgres_admin_user }}"
        login_password: "{{ postgres_admin_password }}"
        port: "{{ vault_db_port }}"
      register: existing_unseal_keys
      delegate_to: "{{ groups['postgres_host'][0] }}"
      become: no
      run_once: true
      when: vault_is_initialized
      tags: [ 'init', 'unseal' ]

    - name: Set unseal keys from database
      set_fact:
        vault_unseal_keys: "{{ existing_unseal_keys.query_result | map(attribute='key') | list }}"
      run_once: true
      when: vault_is_initialized and existing_unseal_keys.query_result is defined and existing_unseal_keys.query_result | length > 0
      tags: [ 'init' , 'unseal']

    # Initialize Vault if not already initialized
    - name: Initialize Vault (leader only)
      uri:
        url: "http://{{ ansible_host }}:{{ vault_api_port }}/v1/sys/init"
        method: POST
        body_format: json
        body:
          secret_shares: 5
          secret_threshold: 3
        status_code: [ 200 ]
      when:
        - inventory_hostname == groups['vault_nodes'][0]
        - not vault_is_initialized
      register: vault_init_result
      tags: [ 'init' ]

    - name: Set initialization facts from API response
      set_fact:
        vault_unseal_keys: "{{ vault_init_result.json.keys_base64 }}"
        vault_root_token: "{{ vault_init_result.json.root_token }}"
      when:
        - vault_init_result is defined
        - vault_init_result.json is defined
        - inventory_hostname == groups['vault_nodes'][0]
      run_once: true
      tags: [ 'init' ]

    - name: Save unseal keys to database
      postgresql_query:
        db: "{{ vault_db_name }}"
        query: "INSERT INTO {{ vault_unseal_table }} (key) VALUES ('{{ item }}');"
        login_host: "{{ vault_db_host }}"
        login_user: "{{ postgres_admin_user }}"
        login_password: "{{ postgres_admin_password }}"
        port: "{{ vault_db_port }}"
      loop: "{{ vault_unseal_keys }}"
      delegate_to: "{{ groups['postgres_host'][0] }}"
      become: no
      when:
        - vault_unseal_keys is defined
        - inventory_hostname == groups['vault_nodes'][0]
        - not vault_is_initialized
      run_once: true
      tags: [ 'init' ]

    - name: Save root token to database
      postgresql_query:
        db: "{{ vault_db_name }}"
        query: "INSERT INTO {{ vault_unseal_table }} (key) VALUES ('ROOT_TOKEN:{{ vault_root_token }}');"
        login_host: "{{ vault_db_host }}"
        login_user: "{{ postgres_admin_user }}"
        login_password: "{{ postgres_admin_password }}"
        port: "{{ vault_db_port }}"
      delegate_to: "{{ groups['postgres_host'][0] }}"
      become: no
      when:
        - vault_root_token is defined
        - inventory_hostname == groups['vault_nodes'][0]
        - not vault_is_initialized
      run_once: true
      tags: [ 'init' ]

    # Distribute unseal keys to all nodes
    - name: Distribute unseal keys to all nodes
      set_fact:
        vault_unseal_keys: "{{ hostvars[groups['vault_nodes'][0]]['vault_unseal_keys'] }}"
      when:
        - inventory_hostname != groups['vault_nodes'][0]
        - hostvars[groups['vault_nodes'][0]]['vault_unseal_keys'] is defined
      tags: ['init']

    # Unsealing phase
    - name: Check current seal status
      uri:
        url: "http://{{ ansible_host }}:{{ vault_api_port }}/v1/sys/seal-status"
        method: GET
      register: seal_status
      changed_when: false
      tags: ['unseal']

    - name: Unseal Vault nodes
      uri:
        url: "http://{{ ansible_host }}:{{ vault_api_port }}/v1/sys/unseal"
        method: POST
        body_format: json
        body:
          key: "{{ item }}"
        status_code: [200]
      loop: "{{ vault_unseal_keys[:3] }}"
      when:
        - vault_unseal_keys is defined
        - seal_status.json.sealed | default(true)
      register: unseal_result
      ignore_errors: yes
      tags: ['unseal']

    - name: Verify final seal status
      uri:
        url: "http://{{ ansible_host }}:{{ vault_api_port }}/v1/sys/seal-status"
        method: GET
      register: final_seal_status
      tags: ['verify']

    - name: Display seal status
      debug:
        msg: "Node {{ inventory_hostname }} - Sealed: {{ final_seal_status.json.sealed }}, Progress: {{ final_seal_status.json.progress }}/{{ final_seal_status.json.t }}"
      tags: ['verify']

    # Cluster verification
    - name: Check cluster leadership
      uri:
        url: "http://{{ ansible_host }}:{{ vault_api_port }}/v1/sys/leader"
        method: GET
      register: leader_status
      ignore_errors: yes
      tags: ['verify']

    - name: Display cluster information
      debug:
        msg:
          - "Node: {{ inventory_hostname }}"
          - "Leader: {{ leader_status.json.is_self | default('unknown') }}"
          - "Leader Address: {{ leader_status.json.leader_address | default('unknown') }}"
          - "Cluster ID: {{ leader_status.json.leader_cluster_address | default('unknown') }}"
      when: leader_status.json is defined
      tags: ['verify']

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart vault
      systemd:
        name: vault
        state: restarted