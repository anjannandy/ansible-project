
- name: Deploy HTTPS Auto-Unseal Script
  hosts: vault_nodes
  become: yes
  vars:
    vault_api_port: 8200
    vault_db_host: "10.0.2.20"
    vault_db_port: 5433
    vault_db_name: "vault"
    vault_unseal_table: "vault_unseal_keys"
    postgres_admin_user: "postgres"
    postgres_admin_password: "postgres_password"

  tasks:
    - name: Create HTTPS-compatible auto-unseal script
      copy:
        dest: /usr/local/bin/vault-auto-unseal.sh
        mode: '0755'
        owner: root
        group: root
        content: |
          #!/bin/bash
          
          # HTTPS Vault Auto-Unseal Script
          VAULT_ADDR="https://127.0.0.1:{{ vault_api_port }}"
          DB_HOST="{{ vault_db_host }}"
          DB_PORT="{{ vault_db_port }}"
          DB_NAME="{{ vault_db_name }}"
          DB_USER="{{ postgres_admin_user }}"
          DB_PASSWORD="{{ postgres_admin_password }}"
          UNSEAL_TABLE="{{ vault_unseal_table }}"
          
          # Logging function
          log() {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a /var/log/vault-auto-unseal.log
          }
          
          log "=== Starting Vault Auto-Unseal Process (HTTPS) ==="
          
          # Wait for Vault service
          log "Waiting for Vault service..."
          for i in {1..30}; do
              if curl -s --insecure "$VAULT_ADDR/v1/sys/health" >/dev/null 2>&1; then
                  log "Vault service is responding"
                  break
              fi
              sleep 2
          done
          
          # Check if already unsealed
          SEAL_STATUS=$(curl -s --insecure "$VAULT_ADDR/v1/sys/seal-status" 2>/dev/null | jq -r '.sealed // true')
          if [ "$SEAL_STATUS" = "false" ]; then
              log "Vault is already unsealed"
              exit 0
          fi
          
          log "Vault is sealed - getting keys from database"
          
          # Get unseal keys with retries
          for retry in {1..3}; do
              PGPASSWORD="$DB_PASSWORD" psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -t -c \
                  "SELECT key FROM $UNSEAL_TABLE WHERE key NOT LIKE 'ROOT_TOKEN:%' AND length(key) > 20 ORDER BY id LIMIT 3;" \
                  > /tmp/unseal_keys.txt 2>/dev/null
              
              if [ -s /tmp/unseal_keys.txt ]; then
                  log "Got unseal keys from database"
                  break
              fi
              log "Retry $retry: waiting for database..."
              sleep 5
          done
          
          if [ ! -s /tmp/unseal_keys.txt ]; then
              log "ERROR: No unseal keys found"
              exit 1
          fi
          
          # Unseal with the keys
          KEYS_USED=0
          while IFS= read -r key && [ $KEYS_USED -lt 3 ]; do
              key=$(echo "$key" | xargs)
              if [ -n "$key" ]; then
                  KEYS_USED=$((KEYS_USED + 1))
                  log "Using unseal key $KEYS_USED"
                  
                  # Try unsealing with retries (using --insecure for HTTPS)
                  for attempt in {1..3}; do
                      RESPONSE=$(curl -s --insecure -X POST "$VAULT_ADDR/v1/sys/unseal" \
                          -H "Content-Type: application/json" \
                          -d "{\"key\": \"$key\"}" 2>/dev/null)
                      
                      if echo "$RESPONSE" | jq . >/dev/null 2>&1; then
                          SEALED=$(echo "$RESPONSE" | jq -r '.sealed // true')
                          PROGRESS=$(echo "$RESPONSE" | jq -r '.progress // 0')
                          THRESHOLD=$(echo "$RESPONSE" | jq -r '.t // 3')
                          
                          log "Progress: $PROGRESS/$THRESHOLD (Sealed: $SEALED)"
                          
                          if [ "$SEALED" = "false" ]; then
                              log "SUCCESS: Vault unsealed!"
                              rm -f /tmp/unseal_keys.txt
                              exit 0
                          fi
                          break
                      else
                          log "Attempt $attempt failed, retrying..."
                          sleep 2
                      fi
                  done
                  
                  # Small delay between keys
                  sleep 2
              fi
          done < /tmp/unseal_keys.txt
          
          rm -f /tmp/unseal_keys.txt
          
          # Final check
          FINAL_STATUS=$(curl -s --insecure "$VAULT_ADDR/v1/sys/seal-status" 2>/dev/null | jq -r '.sealed // true')
          if [ "$FINAL_STATUS" = "false" ]; then
              log "SUCCESS: Vault is unsealed"
              exit 0
          else
              log "ERROR: Failed to unseal Vault"
              exit 1
          fi

    - name: Create systemd service for vault auto-unseal
      copy:
        dest: /etc/systemd/system/vault-auto-unseal.service
        content: |
          [Unit]
          Description=Vault Auto-Unseal Service
          After=vault.service
          Wants=vault.service

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/vault-auto-unseal.sh
          RemainAfterExit=no
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target

    - name: Create systemd timer for vault auto-unseal
      copy:
        dest: /etc/systemd/system/vault-auto-unseal.timer
        content: |
          [Unit]
          Description=Vault Auto-Unseal Timer
          Requires=vault-auto-unseal.service

          [Timer]
          OnBootSec=30sec
          OnUnitActiveSec=60sec
          AccuracySec=10sec

          [Install]
          WantedBy=timers.target

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Enable and start vault auto-unseal timer
      systemd:
        name: vault-auto-unseal.timer
        enabled: yes
        state: started

    - name: Test the auto-unseal script manually
      command: /usr/local/bin/vault-auto-unseal.sh
      register: test_result
      ignore_errors: yes

    - name: Show auto-unseal test results
      debug:
        msg:
          - "Exit code: {{ test_result.rc }}"
          - "Output: {{ test_result.stdout_lines | default([]) }}"
          - "Errors: {{ test_result.stderr_lines | default([]) }}"

    - name: Show recent auto-unseal logs
      shell: "tail -15 /var/log/vault-auto-unseal.log 2>/dev/null || echo 'No logs yet'"
      register: unseal_logs

    - name: Display auto-unseal logs
      debug:
        msg: "{{ unseal_logs.stdout_lines }}"

    - name: Check current vault status
      shell: "curl -s --insecure https://localhost:{{ vault_api_port }}/v1/sys/seal-status | jq '.sealed'"
      register: current_status
      ignore_errors: yes

    - name: Display current vault seal status
      debug:
        msg: "{{ inventory_hostname }} - Currently sealed: {{ current_status.stdout | default('unknown') }}"