---
- name: Install Docker and Kubernetes with State Management
  hosts: kubernetes
  become: yes
  strategy: linear
  gather_facts: yes
  vars:
    kubernetes_version: "1.30.0-1.1"
    pod_network_cidr: "10.244.0.0/16"
    master_ip: "192.168.1.190"

    # State management
    state_dir: "/var/lib/k8s-setup-state"
    setup_completed_file: "{{ state_dir }}/setup_completed"

    # Individual step state files
    state_files:
      system_prep: "{{ state_dir }}/01_system_prep_completed"
      docker_install: "{{ state_dir }}/02_docker_install_completed"
      k8s_install: "{{ state_dir }}/03_k8s_install_completed"
      system_config: "{{ state_dir }}/04_system_config_completed"
      master_init: "{{ state_dir }}/05_master_init_completed"
      worker_join: "{{ state_dir }}/06_worker_join_completed"
      cni_install: "{{ state_dir }}/07_cni_install_completed"

    # Logging configuration
    log_dir: "/var/log/k8s-setup"
    local_log_dir: "./logs"
    server_log_file: "{{ log_dir }}/{{ inventory_hostname }}-setup.log"
    local_server_log: "{{ local_log_dir }}/{{ inventory_hostname }}-setup.log"
    combined_log_file: "{{ local_log_dir }}/combined-setup.log"

    # Timeouts and retries
    kubeadm_timeout: 600
    apt_timeout: 300
    max_retries: 3

  pre_tasks:
    - name: Create local log directory
      delegate_to: localhost
      become: no
      file:
        path: "{{ local_log_dir }}"
        state: directory
        mode: '0755'
      run_once: true

    - name: Create state directory
      file:
        path: "{{ state_dir }}"
        state: directory
        mode: '0755'

    - name: Create remote log directory
      file:
        path: "{{ log_dir }}"
        state: directory
        mode: '0755'

    - name: Create logging script
      copy:
        content: |
          #!/bin/bash
          log_msg() {
            local level="$1"
            local msg="$2"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $msg" | tee -a {{ server_log_file }}
          }
          
          # Execute passed commands
          "$@"
        dest: "{{ log_dir }}/log_helper.sh"
        mode: '0755'

    - name: Initialize server log
      shell: |
        echo "================================================================" > {{ server_log_file }}
        echo "Kubernetes Setup Log for {{ inventory_hostname }}" >> {{ server_log_file }}
        echo "Started: $(date '+%Y-%m-%d %H:%M:%S')" >> {{ server_log_file }}
        echo "Role: {{ node_role }}" >> {{ server_log_file }}
        echo "IP: {{ ansible_host }}" >> {{ server_log_file }}
        echo "================================================================" >> {{ server_log_file }}
        echo "" >> {{ server_log_file }}
      changed_when: false

  tasks:
    # Check overall completion
    - name: Check for overall setup completion
      stat:
        path: "{{ setup_completed_file }}"
      register: setup_completed

    - name: Log setup start
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Starting Kubernetes Setup ===" | tee -a {{ server_log_file }}
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Setup status: {{ 'Already completed' if setup_completed.stat.exists else 'Starting fresh' }}" | tee -a {{ server_log_file }}
      changed_when: false

    - name: Copy server log to local
      fetch:
        src: "{{ server_log_file }}"
        dest: "{{ local_server_log }}"
        flat: yes
      changed_when: false
      ignore_errors: yes

    - name: Update combined log
      delegate_to: localhost
      become: no
      shell: |
        echo "=== {{ inventory_hostname }} ({{ node_role }}) - $(date) ===" >> "{{ combined_log_file }}"
        if [ -f "{{ local_server_log }}" ]; then
          cat "{{ local_server_log }}" >> "{{ combined_log_file }}"
        else
          echo "Log not available yet" >> "{{ combined_log_file }}"
        fi
        echo "" >> "{{ combined_log_file }}"
      changed_when: false
      ignore_errors: yes

    - name: Skip if already completed
      meta: end_host
      when: setup_completed.stat.exists

    # Step 1: System Preparation
    - name: Check system preparation state
      stat:
        path: "{{ state_files.system_prep }}"
      register: system_prep_done

    - name: System preparation
      block:
        - name: Log system preparation start
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Step 1: System Preparation ===" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Kill conflicting processes
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Killing conflicting package manager processes..." | tee -a {{ server_log_file }}
            for pid in $(ps -ef | grep -E 'unattended-upgr|apt-get|dpkg|apt' | grep -v grep | awk '{print $2}'); do
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Killing process $pid" | tee -a {{ server_log_file }}
              kill -9 $pid 2>/dev/null || true
            done
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Process cleanup completed" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Remove package locks
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Removing package locks..." | tee -a {{ server_log_file }}
            rm -f /var/lib/dpkg/lock*
            rm -f /var/lib/apt/lists/lock
            rm -f /var/cache/apt/archives/lock
            rm -f /var/cache/apt/archives/partial/lock
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Package locks removed" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Fix interrupted dpkg
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Fixing interrupted dpkg..." | tee -a {{ server_log_file }}
            export DEBIAN_FRONTEND=noninteractive
            if dpkg --configure --force-confdef --force-confold -a; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] dpkg configuration completed" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [WARNING] dpkg configuration had issues but continuing" | tee -a {{ server_log_file }}
            fi
          changed_when: false

        - name: Update package index
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Updating package index..." | tee -a {{ server_log_file }}
            export DEBIAN_FRONTEND=noninteractive
            if timeout {{ apt_timeout }} apt-get update; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Package index updated" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Package index update failed" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: apt_update
          retries: "{{ max_retries }}"
          delay: 10

        - name: Install prerequisites
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Installing prerequisites..." | tee -a {{ server_log_file }}
            export DEBIAN_FRONTEND=noninteractive
            if timeout {{ apt_timeout }} apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg2; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Prerequisites installed" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Prerequisites installation failed" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: prereq_install
          retries: "{{ max_retries }}"
          delay: 10

        - name: Mark system preparation complete
          file:
            path: "{{ state_files.system_prep }}"
            state: touch
            mode: '0644'

        - name: Log system preparation complete
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === Step 1: System Preparation COMPLETED ===" | tee -a {{ server_log_file }}
          changed_when: false

      when: not system_prep_done.stat.exists

    # Step 2: Docker Installation
    - name: Check Docker installation state
      stat:
        path: "{{ state_files.docker_install }}"
      register: docker_install_done

    - name: Docker installation
      block:
        - name: Log Docker installation start
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Step 2: Docker Installation ===" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Create keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Add Docker GPG key
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Adding Docker GPG key..." | tee -a {{ server_log_file }}
            if curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg --batch --yes; then
              chmod a+r /etc/apt/keyrings/docker.gpg
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker GPG key added" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Failed to add Docker GPG key" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: docker_key
          retries: "{{ max_retries }}"
          delay: 10

        - name: Add Docker repository
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Adding Docker repository..." | tee -a {{ server_log_file }}
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            if apt-get update; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker repository added" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Failed to add Docker repository" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: docker_repo
          retries: "{{ max_retries }}"
          delay: 10

        - name: Install Docker
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Installing Docker..." | tee -a {{ server_log_file }}
            export DEBIAN_FRONTEND=noninteractive
            if timeout {{ apt_timeout }} apt-get install -y docker-ce docker-ce-cli containerd.io; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker installed" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Docker installation failed" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: docker_install
          retries: "{{ max_retries }}"
          delay: 10

        - name: Configure Docker daemon
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Configuring Docker daemon..." | tee -a {{ server_log_file }}
            cat > /etc/docker/daemon.json << 'EOF'
            {
              "exec-opts": ["native.cgroupdriver=systemd"],
              "log-driver": "json-file",
              "log-opts": {
                "max-size": "100m"
              },
              "storage-driver": "overlay2"
            }
            EOF
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker daemon configured" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Start and enable Docker
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Starting Docker service..." | tee -a {{ server_log_file }}
            systemctl daemon-reload
            systemctl enable docker
            systemctl start docker
            if systemctl is-active --quiet docker; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Docker service started" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Docker service failed to start" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: docker_service

        - name: Add ubuntu user to docker group
          user:
            name: ubuntu
            groups: docker
            append: yes

        - name: Mark Docker installation complete
          file:
            path: "{{ state_files.docker_install }}"
            state: touch
            mode: '0644'

        - name: Log Docker installation complete
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === Step 2: Docker Installation COMPLETED ===" | tee -a {{ server_log_file }}
          changed_when: false

      when: not docker_install_done.stat.exists

    # Step 3: Kubernetes Installation
    - name: Check Kubernetes installation state
      stat:
        path: "{{ state_files.k8s_install }}"
      register: k8s_install_done

    - name: Kubernetes installation
      block:
        - name: Log Kubernetes installation start
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Step 3: Kubernetes Installation ===" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Add Kubernetes GPG key
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Adding Kubernetes GPG key..." | tee -a {{ server_log_file }}
            if curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --batch --yes; then
              chmod a+r /etc/apt/keyrings/kubernetes-apt-keyring.gpg
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubernetes GPG key added" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Failed to add Kubernetes GPG key" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: k8s_key
          retries: "{{ max_retries }}"
          delay: 10

        - name: Add Kubernetes repository
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Adding Kubernetes repository..." | tee -a {{ server_log_file }}
            echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
            if apt-get update; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubernetes repository added" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Failed to add Kubernetes repository" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: k8s_repo
          retries: "{{ max_retries }}"
          delay: 10

        - name: Install Kubernetes components
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Installing Kubernetes components..." | tee -a {{ server_log_file }}
            export DEBIAN_FRONTEND=noninteractive
            if timeout {{ apt_timeout }} apt-get install -y kubelet={{ kubernetes_version }} kubeadm={{ kubernetes_version }} kubectl={{ kubernetes_version }}; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubernetes components installed" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Kubernetes components installation failed" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: k8s_install
          retries: "{{ max_retries }}"
          delay: 10

        - name: Hold Kubernetes packages
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Holding Kubernetes packages..." | tee -a {{ server_log_file }}
            apt-mark hold kubelet kubeadm kubectl
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubernetes packages held" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Configure kubelet
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Configuring kubelet..." | tee -a {{ server_log_file }}
            echo 'KUBELET_EXTRA_ARGS=--cgroup-driver=systemd' > /etc/default/kubelet
            systemctl enable kubelet
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubelet configured" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Mark Kubernetes installation complete
          file:
            path: "{{ state_files.k8s_install }}"
            state: touch
            mode: '0644'

        - name: Log Kubernetes installation complete
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === Step 3: Kubernetes Installation COMPLETED ===" | tee -a {{ server_log_file }}
          changed_when: false

      when: not k8s_install_done.stat.exists

    # Step 4: System Configuration
    - name: Check system configuration state
      stat:
        path: "{{ state_files.system_config }}"
      register: system_config_done

    - name: System configuration
      block:
        - name: Log system configuration start
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Step 4: System Configuration ===" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Load kernel modules
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Loading kernel modules..." | tee -a {{ server_log_file }}
            modprobe overlay
            modprobe br_netfilter
            echo "overlay" > /etc/modules-load.d/k8s.conf
            echo "br_netfilter" >> /etc/modules-load.d/k8s.conf
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kernel modules loaded" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Configure kernel parameters
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Configuring kernel parameters..." | tee -a {{ server_log_file }}
            cat > /etc/sysctl.d/k8s.conf << 'EOF'
            net.bridge.bridge-nf-call-iptables = 1
            net.bridge.bridge-nf-call-ip6tables = 1
            net.ipv4.ip_forward = 1
            EOF
            sysctl --system
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kernel parameters configured" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Disable swap
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Disabling swap..." | tee -a {{ server_log_file }}
            swapoff -a
            sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Swap disabled" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Mark system configuration complete
          file:
            path: "{{ state_files.system_config }}"
            state: touch
            mode: '0644'

        - name: Log system configuration complete
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === Step 4: System Configuration COMPLETED ===" | tee -a {{ server_log_file }}
          changed_when: false

      when: not system_config_done.stat.exists

    # Step 5: Master Node Initialization
    - name: Check master initialization state
      stat:
        path: "{{ state_files.master_init }}"
      register: master_init_done

    - name: Initialize Kubernetes master
      block:
        - name: Log master initialization start
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Step 5: Master Node Initialization ===" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Check if cluster is already initialized
          stat:
            path: /etc/kubernetes/admin.conf
          register: cluster_initialized

        - name: Initialize Kubernetes cluster
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Initializing Kubernetes cluster..." | tee -a {{ server_log_file }}
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] This may take several minutes..." | tee -a {{ server_log_file }}
            
            # Create kubeadm config file
            cat > /tmp/kubeadm-config.yaml << 'EOF'
            apiVersion: kubeadm.k8s.io/v1beta3
            kind: ClusterConfiguration
            kubernetesVersion: v1.30.0
            networking:
              podSubnet: {{ pod_network_cidr }}
            apiServer:
              advertiseAddress: {{ master_ip }}
            ---
            apiVersion: kubeadm.k8s.io/v1beta3
            kind: InitConfiguration
            localAPIEndpoint:
              advertiseAddress: {{ master_ip }}
            EOF
            
            # Run kubeadm init with timeout
            if timeout {{ kubeadm_timeout }} kubeadm init --config=/tmp/kubeadm-config.yaml --ignore-preflight-errors=all --v=5 2>&1 | tee -a {{ server_log_file }}; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Kubernetes cluster initialized" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Kubernetes cluster initialization failed or timed out" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: kubeadm_init
          when: not cluster_initialized.stat.exists

        - name: Verify admin.conf creation
          stat:
            path: /etc/kubernetes/admin.conf
          register: admin_conf_verify

        - name: Fail if admin.conf not created
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] admin.conf not found after kubeadm init" | tee -a {{ server_log_file }}
            exit 1
          when: not admin_conf_verify.stat.exists

        - name: Set up kubeconfig for ubuntu user
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Setting up kubeconfig for ubuntu user..." | tee -a {{ server_log_file }}
            mkdir -p /home/ubuntu/.kube
            cp /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
            chown -R ubuntu:ubuntu /home/ubuntu/.kube
            chmod 600 /home/ubuntu/.kube/config
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] kubeconfig configured for ubuntu user" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Test kubectl access
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Testing kubectl access..." | tee -a {{ server_log_file }}
            export KUBECONFIG=/home/ubuntu/.kube/config
            if kubectl get nodes 2>&1 | tee -a {{ server_log_file }}; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] kubectl access verified" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] kubectl access failed" | tee -a {{ server_log_file }}
              exit 1
            fi
          become_user: ubuntu
          register: kubectl_test

        - name: Generate join command
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Generating join command..." | tee -a {{ server_log_file }}
            kubeadm token create --print-join-command
          register: join_command

        - name: Save join command
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Saving join command..." | tee -a {{ server_log_file }}
            echo "{{ join_command.stdout }}" > {{ state_dir }}/join-command.sh
            chmod +x {{ state_dir }}/join-command.sh
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Join command saved" | tee -a {{ server_log_file }}
          when: join_command.stdout is defined

        - name: Mark master initialization complete
          file:
            path: "{{ state_files.master_init }}"
            state: touch
            mode: '0644'

        - name: Log master initialization complete
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === Step 5: Master Node Initialization COMPLETED ===" | tee -a {{ server_log_file }}
          changed_when: false

      when: not master_init_done.stat.exists and node_role == 'master'

    # Step 6: Worker Node Join
    - name: Check worker join state
      stat:
        path: "{{ state_files.worker_join }}"
      register: worker_join_done

    - name: Join worker to cluster
      block:
        - name: Log worker join start
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Step 6: Worker Node Join ===" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Wait for join command from master
          wait_for:
            path: "{{ hostvars[groups['kubernetes'][0]]['state_dir'] }}/join-command.sh"
            timeout: 300
          delegate_to: "{{ groups['kubernetes'][0] }}"

        - name: Get join command from master
          shell: cat {{ hostvars[groups['kubernetes'][0]]['state_dir'] }}/join-command.sh
          register: join_command_content
          delegate_to: "{{ groups['kubernetes'][0] }}"

        - name: Join worker to cluster
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Joining worker to cluster..." | tee -a {{ server_log_file }}
            if {{ join_command_content.stdout }} 2>&1 | tee -a {{ server_log_file }}; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Worker joined to cluster" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Worker join failed" | tee -a {{ server_log_file }}
              exit 1
            fi
          register: worker_join

        - name: Mark worker join complete
          file:
            path: "{{ state_files.worker_join }}"
            state: touch
            mode: '0644'

        - name: Log worker join complete
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === Step 6: Worker Node Join COMPLETED ===" | tee -a {{ server_log_file }}
          changed_when: false

      when: not worker_join_done.stat.exists and node_role == 'worker'

    # Step 7: CNI Installation (only on master)
    - name: Check CNI installation state
      stat:
        path: "{{ state_files.cni_install }}"
      register: cni_install_done

    - name: Install Flannel CNI
      block:
        - name: Log CNI installation start
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Step 7: CNI Installation ===" | tee -a {{ server_log_file }}
          changed_when: false

        - name: Install Flannel CNI
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Installing Flannel CNI..." | tee -a {{ server_log_file }}
            export KUBECONFIG=/home/ubuntu/.kube/config
            if kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml 2>&1 | tee -a {{ server_log_file }}; then
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] Flannel CNI installed" | tee -a {{ server_log_file }}
            else
              echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] Flannel CNI installation failed" | tee -a {{ server_log_file }}
              exit 1
            fi
          become_user: ubuntu
          register: flannel_install

        - name: Mark CNI installation complete
          file:
            path: "{{ state_files.cni_install }}"
            state: touch
            mode: '0644'

        - name: Log CNI installation complete
          shell: |
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === Step 7: CNI Installation COMPLETED ===" | tee -a {{ server_log_file }}
          changed_when: false

      when: not cni_install_done.stat.exists and node_role == 'master'

    # Mark overall setup complete
    - name: Mark overall setup complete
      file:
        path: "{{ setup_completed_file }}"
        state: touch
        mode: '0644'

    - name: Log setup completion
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] === KUBERNETES SETUP COMPLETED SUCCESSFULLY ===" | tee -a {{ server_log_file }}
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] All steps completed on {{ inventory_hostname }}" | tee -a {{ server_log_file }}
      changed_when: false

    # Final verification
    - name: Final verification
      shell: |
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] === Final Verification ===" | tee -a {{ server_log_file }}
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Docker status: $(systemctl is-active docker)" | tee -a {{ server_log_file }}
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Kubelet status: $(systemctl is-active kubelet)" | tee -a {{ server_log_file }}
        {% if node_role == 'master' %}
        export KUBECONFIG=/home/ubuntu/.kube/config
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] Cluster nodes:" | tee -a {{ server_log_file }}
        kubectl get nodes 2>&1 | tee -a {{ server_log_file }} || echo "[$(date '+%Y-%m-%d %H:%M:%S')] [WARNING] kubectl not accessible" | tee -a {{ server_log_file }}
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] System pods:" | tee -a {{ server_log_file }}
        kubectl get pods -n kube-system 2>&1 | tee -a {{ server_log_file }} || echo "[$(date '+%Y-%m-%d %H:%M:%S')] [WARNING] kubectl not accessible" | tee -a {{ server_log_file }}
        {% endif %}
      become_user: ubuntu
      when: node_role == 'master'
      changed_when: false

    # Copy final logs
    - name: Copy final server log to local
      fetch:
        src: "{{ server_log_file }}"
        dest: "{{ local_server_log }}"
        flat: yes
      changed_when: false

    - name: Update final combined log
      delegate_to: localhost
      become: no
      shell: |
        echo "=== FINAL {{ inventory_hostname }} ({{ node_role }}) - $(date) ===" >> "{{ combined_log_file }}"
        cat "{{ local_server_log }}" >> "{{ combined_log_file }}"
        echo "=========================================" >> "{{ combined_log_file }}"
        echo "" >> "{{ combined_log_file }}"
      changed_when: false

  post_tasks:
    - name: Display completion summary
      debug:
        msg: |
          ===================================================
          Kubernetes Setup Complete for {{ inventory_hostname }}
          ===================================================
          Role: {{ node_role }}
          IP: {{ ansible_host }}
          
          Individual server log: {{ local_server_log }}
          Combined log: {{ combined_log_file }}
          
          {% if node_role == 'master' %}
          Master access:
          ssh ubuntu@{{ ansible_host }}
          kubectl get nodes
          {% endif %}
          
          State files location: {{ state_dir }}
          ===================================================

    - name: Create restart and monitoring scripts
      delegate_to: localhost
      become: no
      copy:
        content: |
          #!/bin/bash
          # Kubernetes Setup Management Script
          
          show_usage() {
            echo "Usage: $0 [command]"
            echo ""
            echo "Commands:"
            echo "  status     - Show current setup status"
            echo "  logs       - Show real-time logs"
            echo "  restart    - Restart from failed step"
            echo "  clean      - Clean all state and restart"
            echo "  help       - Show this help"
            echo ""
          }
          
          show_status() {
            echo "=== Kubernetes Setup Status ==="
            echo ""
            for host in master worker1 worker2 worker3 worker4; do
              echo "=== $host ==="
              if [ -f "{{ local_log_dir }}/${host}-setup.log" ]; then
                echo "Last 5 log entries:"
                tail -n 5 "{{ local_log_dir }}/${host}-setup.log"
              else
                echo "No log file found"
              fi
              echo ""
            done
          }
          
          show_logs() {
            echo "=== Real-time Combined Logs ==="
            echo "Press Ctrl+C to exit"
            echo ""
            tail -f "{{ combined_log_file }}"
          }
          
          restart_setup() {
            echo "=== Restarting Kubernetes Setup ==="
            echo ""
            ansible-playbook -i inventory.yml kubernetes-setup.yml
          }
          
          clean_restart() {
            echo "=== Clean Restart ==="
            echo "This will remove all state files and restart from scratch"
            read -p "Are you sure? (y/N): " confirm
            if [[ $confirm == [yY] ]]; then
              echo "Cleaning state files..."
              ansible all -i inventory.yml -m shell -a "sudo rm -rf {{ state_dir }}/*" --become
              echo "Starting fresh setup..."
              ansible-playbook -i inventory.yml kubernetes-setup.yml
            else
              echo "Cancelled"
            fi
          }
          
          case "$1" in
            status)
              show_status
              ;;
            logs)
              show_logs
              ;;
            restart)
              restart_setup
              ;;
            clean)
              clean_restart
              ;;
            help|*)
              show_usage
              ;;
          esac
        dest: "{{ local_log_dir }}/k8s-manage.sh"
        mode: '0755'
      run_once: true